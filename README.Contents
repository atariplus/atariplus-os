This directory contains the source codes for the
Atari++ emulator built-in ROM code. The files are
copyrighted (c) 2003 Thomas Richter, and licenced
to you according the TPL licence, see README.licence.

Files in this archive:


850.asm, 850.i
Source of the 850 interface driver, namely the R: handler.
This is not part of the Os directly, but imported into the
Atari++ emulator for the interface box emulation.

850.conf
ld65 linker file for the 850 interface.

850.other.conf
ld65 linker file for the 850 interface. Two files are required 
since the 850 interface code is made relocatable by computing
the difference of the two binary output files by means of the
reloc.c program.

loader.asm, loader.i, loader.conf
Source of the 850 bootstrap code that loads the 850 handler
and relocates it.

--

antic.i
Os equates defining ANTIC hardware registers.

gtia.i
Os equates defining GTIA hardware registers.

pokey.i
Os equates defining POKEY hardware registers.

pia.i
Os equates defining PIA hardware registers.

--

errors.i
Error codes generated by the Os.

charmap.asm,charmap.i
The regular character set source, mapped into
0xe000 and up.

intlmap.asm,intlmap.i
The international character set source, mapped
into 0xcc00 and up.

irq.asm,irq.i
The maskable interrupt handler sources.

kernel.asm,kernel.i
The sources for the Os jump table and header
files. This defines the official Os-entries at
0xe400 thru e4bf.

rts.asm, rts.i
The lonely RTS at offset 0xe4c0 that is expected
there by various programs.

nmi.asm,nmi.i
The non-maskable interrupt handler, and the
vertical retrace handler.

reset.asm,reset.i
The bootstrap routines; chip initialization, RAM
test, system setup and disk boot.

vectors.asm,vectors.i
The 6502 hardware vectors for reset, NMI and IRQ
handling.

romtest.asm,romtest.i
The parts of the bootstrap routines that are in
the selftest area. The ROM checksum and the low
memory area setup.

misc.asm,misc.i
Miscellaneous kernel sources, the SetIRQ
routine, the MountHandler, InitNMI, Boot850,
and various dummies for the tape handler.

sio.asm,sio.i
Sources for the serial I/O routine, SIO.

cio.asm,cio.i
Sources for the central I/O routine, CIO.

diskinterf.asm,diskinterf.i
Sources for the resident disk handler.

editor.asm,editor.i
Sources for the E: editor handler.

screen.asm,screen.i
Sources for the S: screen handler.

keyboard.asm,keyboard.i
The sources for the K: keyboard handler.

printer.asm,printer.i
Sources for the P: printer handler.

tape.asm,tape.i
The dummy C: tape handler. This just delivers
error codes and reserves ROM space for the H:
handler that is patched over it.

fms.asm,fms.i
The file management system, thus the sources
for the (now ROM-resident) D: handler.

dup.asm,dup.i
The dos command line interface.

--

bintohex.c
A tiny little C program that converts a raw
binary dump into a hex dump, suitable for a C or
C++ program. This program generates the dumps that
are part of Atari++.

checksum.c
This program computes the ROM checksums and installs them
into the ROM dump.

reloc.c
Takes two binary dumps that are generated for absolute addresses
that differ by exactly 258 bytes and computes relocation data
suitable to be patched in by the loader.asm. This is required
to built the relocatable R: handler.
Note that the sources must be written in a "suitable" way: The
only absolute references must be two-byte ("word") references.
Specifically, the operators ">" and "<" to extract low- and hi-
byte of an address are ruled out.


--

makefile:
The makefile that builds all this.

symtab.patch
A patch that works around a bug in the ca65 2.9.0 assembler.
Unfortunately required, see README.Compile
